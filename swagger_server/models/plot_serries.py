# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PlotSerries(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, xvalues: List[float]=None, yvalues: List[float]=None, legend: str=None):  # noqa: E501
        """PlotSerries - a model defined in Swagger

        :param xvalues: The xvalues of this PlotSerries.  # noqa: E501
        :type xvalues: List[float]
        :param yvalues: The yvalues of this PlotSerries.  # noqa: E501
        :type yvalues: List[float]
        :param legend: The legend of this PlotSerries.  # noqa: E501
        :type legend: str
        """
        self.swagger_types = {
            'xvalues': List[float],
            'yvalues': List[float],
            'legend': str
        }

        self.attribute_map = {
            'xvalues': 'xvalues',
            'yvalues': 'yvalues',
            'legend': 'legend'
        }
        self._xvalues = xvalues
        self._yvalues = yvalues
        self._legend = legend

    @classmethod
    def from_dict(cls, dikt) -> 'PlotSerries':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Plot_serries of this PlotSerries.  # noqa: E501
        :rtype: PlotSerries
        """
        return util.deserialize_model(dikt, cls)

    @property
    def xvalues(self) -> List[float]:
        """Gets the xvalues of this PlotSerries.


        :return: The xvalues of this PlotSerries.
        :rtype: List[float]
        """
        return self._xvalues

    @xvalues.setter
    def xvalues(self, xvalues: List[float]):
        """Sets the xvalues of this PlotSerries.


        :param xvalues: The xvalues of this PlotSerries.
        :type xvalues: List[float]
        """
        if xvalues is None:
            raise ValueError("Invalid value for `xvalues`, must not be `None`")  # noqa: E501

        self._xvalues = xvalues

    @property
    def yvalues(self) -> List[float]:
        """Gets the yvalues of this PlotSerries.


        :return: The yvalues of this PlotSerries.
        :rtype: List[float]
        """
        return self._yvalues

    @yvalues.setter
    def yvalues(self, yvalues: List[float]):
        """Sets the yvalues of this PlotSerries.


        :param yvalues: The yvalues of this PlotSerries.
        :type yvalues: List[float]
        """
        if yvalues is None:
            raise ValueError("Invalid value for `yvalues`, must not be `None`")  # noqa: E501

        self._yvalues = yvalues

    @property
    def legend(self) -> str:
        """Gets the legend of this PlotSerries.


        :return: The legend of this PlotSerries.
        :rtype: str
        """
        return self._legend

    @legend.setter
    def legend(self, legend: str):
        """Sets the legend of this PlotSerries.


        :param legend: The legend of this PlotSerries.
        :type legend: str
        """

        self._legend = legend
