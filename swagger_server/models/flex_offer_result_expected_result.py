# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FlexOfferResultExpectedResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, timestamp: str=None, quantity_kw: float=None, price_euro_per_kw: float=None, direction: str=None):  # noqa: E501
        """FlexOfferResultExpectedResult - a model defined in Swagger

        :param timestamp: The timestamp of this FlexOfferResultExpectedResult.  # noqa: E501
        :type timestamp: str
        :param quantity_kw: The quantity_kw of this FlexOfferResultExpectedResult.  # noqa: E501
        :type quantity_kw: float
        :param price_euro_per_kw: The price_euro_per_kw of this FlexOfferResultExpectedResult.  # noqa: E501
        :type price_euro_per_kw: float
        :param direction: The direction of this FlexOfferResultExpectedResult.  # noqa: E501
        :type direction: str
        """
        self.swagger_types = {
            'timestamp': str,
            'quantity_kw': float,
            'price_euro_per_kw': float,
            'direction': str
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'quantity_kw': 'quantity_kw',
            'price_euro_per_kw': 'price_euro_per_kw',
            'direction': 'direction'
        }
        self._timestamp = timestamp
        self._quantity_kw = quantity_kw
        self._price_euro_per_kw = price_euro_per_kw
        self._direction = direction

    @classmethod
    def from_dict(cls, dikt) -> 'FlexOfferResultExpectedResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FlexOfferResult_expected_result of this FlexOfferResultExpectedResult.  # noqa: E501
        :rtype: FlexOfferResultExpectedResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this FlexOfferResultExpectedResult.


        :return: The timestamp of this FlexOfferResultExpectedResult.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """Sets the timestamp of this FlexOfferResultExpectedResult.


        :param timestamp: The timestamp of this FlexOfferResultExpectedResult.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def quantity_kw(self) -> float:
        """Gets the quantity_kw of this FlexOfferResultExpectedResult.


        :return: The quantity_kw of this FlexOfferResultExpectedResult.
        :rtype: float
        """
        return self._quantity_kw

    @quantity_kw.setter
    def quantity_kw(self, quantity_kw: float):
        """Sets the quantity_kw of this FlexOfferResultExpectedResult.


        :param quantity_kw: The quantity_kw of this FlexOfferResultExpectedResult.
        :type quantity_kw: float
        """

        self._quantity_kw = quantity_kw

    @property
    def price_euro_per_kw(self) -> float:
        """Gets the price_euro_per_kw of this FlexOfferResultExpectedResult.


        :return: The price_euro_per_kw of this FlexOfferResultExpectedResult.
        :rtype: float
        """
        return self._price_euro_per_kw

    @price_euro_per_kw.setter
    def price_euro_per_kw(self, price_euro_per_kw: float):
        """Sets the price_euro_per_kw of this FlexOfferResultExpectedResult.


        :param price_euro_per_kw: The price_euro_per_kw of this FlexOfferResultExpectedResult.
        :type price_euro_per_kw: float
        """

        self._price_euro_per_kw = price_euro_per_kw

    @property
    def direction(self) -> str:
        """Gets the direction of this FlexOfferResultExpectedResult.


        :return: The direction of this FlexOfferResultExpectedResult.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction: str):
        """Sets the direction of this FlexOfferResultExpectedResult.


        :param direction: The direction of this FlexOfferResultExpectedResult.
        :type direction: str
        """

        self._direction = direction
