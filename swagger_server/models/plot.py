# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.plot_serries import PlotSerries  # noqa: F401,E501
from swagger_server import util


class Plot(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, serries: List[PlotSerries]=None, title: str=None, xlabel: str=None, ylabel: str=None, plot_type: str=None):  # noqa: E501
        """Plot - a model defined in Swagger

        :param serries: The serries of this Plot.  # noqa: E501
        :type serries: List[PlotSerries]
        :param title: The title of this Plot.  # noqa: E501
        :type title: str
        :param xlabel: The xlabel of this Plot.  # noqa: E501
        :type xlabel: str
        :param ylabel: The ylabel of this Plot.  # noqa: E501
        :type ylabel: str
        :param plot_type: The plot_type of this Plot.  # noqa: E501
        :type plot_type: str
        """
        self.swagger_types = {
            'serries': List[PlotSerries],
            'title': str,
            'xlabel': str,
            'ylabel': str,
            'plot_type': str
        }

        self.attribute_map = {
            'serries': 'serries',
            'title': 'title',
            'xlabel': 'xlabel',
            'ylabel': 'ylabel',
            'plot_type': 'plot_type'
        }
        self._serries = serries
        self._title = title
        self._xlabel = xlabel
        self._ylabel = ylabel
        self._plot_type = plot_type

    @classmethod
    def from_dict(cls, dikt) -> 'Plot':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Plot of this Plot.  # noqa: E501
        :rtype: Plot
        """
        return util.deserialize_model(dikt, cls)

    @property
    def serries(self) -> List[PlotSerries]:
        """Gets the serries of this Plot.


        :return: The serries of this Plot.
        :rtype: List[PlotSerries]
        """
        return self._serries

    @serries.setter
    def serries(self, serries: List[PlotSerries]):
        """Sets the serries of this Plot.


        :param serries: The serries of this Plot.
        :type serries: List[PlotSerries]
        """
        if serries is None:
            raise ValueError("Invalid value for `serries`, must not be `None`")  # noqa: E501

        self._serries = serries

    @property
    def title(self) -> str:
        """Gets the title of this Plot.


        :return: The title of this Plot.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Plot.


        :param title: The title of this Plot.
        :type title: str
        """

        self._title = title

    @property
    def xlabel(self) -> str:
        """Gets the xlabel of this Plot.


        :return: The xlabel of this Plot.
        :rtype: str
        """
        return self._xlabel

    @xlabel.setter
    def xlabel(self, xlabel: str):
        """Sets the xlabel of this Plot.


        :param xlabel: The xlabel of this Plot.
        :type xlabel: str
        """

        self._xlabel = xlabel

    @property
    def ylabel(self) -> str:
        """Gets the ylabel of this Plot.


        :return: The ylabel of this Plot.
        :rtype: str
        """
        return self._ylabel

    @ylabel.setter
    def ylabel(self, ylabel: str):
        """Sets the ylabel of this Plot.


        :param ylabel: The ylabel of this Plot.
        :type ylabel: str
        """

        self._ylabel = ylabel

    @property
    def plot_type(self) -> str:
        """Gets the plot_type of this Plot.


        :return: The plot_type of this Plot.
        :rtype: str
        """
        return self._plot_type

    @plot_type.setter
    def plot_type(self, plot_type: str):
        """Sets the plot_type of this Plot.


        :param plot_type: The plot_type of this Plot.
        :type plot_type: str
        """
        allowed_values = ["scatter", "bar"]  # noqa: E501
        if plot_type not in allowed_values:
            raise ValueError(
                "Invalid value for `plot_type` ({0}), must be one of {1}"
                .format(plot_type, allowed_values)
            )

        self._plot_type = plot_type
